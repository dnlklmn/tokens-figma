/// <reference types="plugin-typings" />
import { Subject } from 'rxjs';
import { CommonStyleProps } from './types';
export declare const api: Readonly<{
    getInitialTree: () => Promise<{
        id: any;
        type: any;
        reactId: string | void;
        children: any;
    }>;
    renderInstance: (type: any, _node: any, props: any, tempNode: any) => Promise<void>;
    appendToContainer: (_parentNode: any, _childNode: any) => Promise<void>;
    insertToContainer: (_parentNode: any, _newChildNode: any, _beforeChildNode: any) => Promise<void>;
    listAvailableFontsAsync: () => Promise<Font[]>;
    loadFontAsync: (fontName: any) => Promise<void>;
    remove: (_childNode: any) => Promise<void>;
    getTreeForYoga: (_instance: any) => Promise<{
        width: any;
        height: any;
        style: any;
        children: any;
        reactId: string | void;
        nodeBatchId: string;
    }>;
    findNodeByName: (_node: any, name: any) => Promise<{
        id: any;
        type: any;
        reactId: string | void;
        children: any;
    }>;
    createImage: (data: any) => Promise<string>;
    setCurrentPage: (_node: any) => Promise<void>;
    highlightNativeElement: (_node: any) => Promise<void>;
    createOrUpdatePaintStyle: (properties: {
        paints: symbol | void | readonly Paint[];
        params: CommonStyleProps;
    }) => Promise<string>;
    createOrUpdateTextStyle: (properties: {
        textProperties: any;
        params: CommonStyleProps;
        loadedFont: any;
    }) => Promise<string>;
}>;
export declare const setupMainThread: () => void;
export declare const $currentPageTempId: Subject<unknown>;
export declare const $selectionReactIds: Subject<unknown>;
export declare const $updateYogaReactId: Subject<unknown>;
export declare const $bindReactIdWithNodeId: Subject<[string, string]>;
export declare const uiApi: Readonly<{
    currentPageChange: (reactId: any) => Promise<void>;
    selectionChange: (reactIds: any) => Promise<void>;
    updateYogaNode: (reactId: any) => Promise<void>;
    bindReactIdWithNode: (reactId: any, nodeId: any) => Promise<void>;
}>;
