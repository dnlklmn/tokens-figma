"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var transformColors_1 = require("./transformColors");
var converFontStyle_1 = require("./converFontStyle");
var transformDimension_1 = require("./transformDimension");
var transformShadowToEffect_1 = require("./transformShadowToEffect");
var textAlignMapping = {
    left: 'LEFT',
    right: 'RIGHT',
    center: 'CENTER',
    justify: 'JUSTIFIED'
};
var textDecorationLineMapping = {
    none: 'NONE',
    underline: 'UNDERLINE',
    'line-through': 'STRIKETHROUGH'
};
exports.transformTextStyleProperties = function (style) {
    if (!style) {
        return {};
    }
    if (process.env.NODE_ENV !== 'production') {
        if (style.fontStyle && style.fontStyle !== 'normal' && style.fontStyle !== 'italic') {
            console.warn("fontStyle: '" + style.fontStyle + "': Non-standard font styles may not work at other platforms");
        }
    }
    return __assign({}, ((style && style.color && { fills: [transformColors_1.colorToPaint(style.color)] }) || { fills: [transformColors_1.colorToPaint('#000000')] }), (style &&
        style.fontFamily && {
        fontName: { family: style.fontFamily, style: converFontStyle_1.convertFontStyle(style.fontWeight, style.fontStyle) }
    }), (style && style.fontSize && { fontSize: style.fontSize }), (style &&
        style.textAlign &&
        textAlignMapping[style.textAlign] && { textAlignHorizontal: textAlignMapping[style.textAlign] }), (style && typeof style.lineHeight === 'number'
        ? { lineHeight: { value: style.lineHeight, unit: 'PIXELS' } }
        : typeof style.lineHeight === 'string' && {
            lineHeight: transformDimension_1.transformDimensionMapper(style.lineHeight)
                .px(function (value) { return ({ value: value, unit: 'PIXELS' }); })
                .percentage(function (value) { return ({ value: value, unit: 'PERCENT' }); })
                .auto(function () { return ({ unit: 'AUTO' }); })
                .value()
        }), (style &&
        (typeof style.letterSpacing === 'number' || typeof style.letterSpacing === 'string') && {
        letterSpacing: transformDimension_1.transformDimensionMapper(style.letterSpacing)
            .px(function (value) { return ({ value: value, unit: 'PIXELS' }); })
            .percentage(function (value) { return ({ value: value, unit: 'PERCENT' }); })
            .value()
    }), (style &&
        style.textDecorationLine &&
        textDecorationLineMapping[style.textDecorationLine] && {
        textDecorationLine: textDecorationLineMapping[style.textDecorationLine]
    }), (style &&
        style.textShadowColor && {
        effects: transformShadowToEffect_1.transformShadowToEffect({
            shadowColor: style.textShadowColor,
            shadowOffset: style.textShadowOffset,
            shadowRadius: style.textShadowRadius
        })
    }));
};
//# sourceMappingURL=transformTextStyleProperties.js.map