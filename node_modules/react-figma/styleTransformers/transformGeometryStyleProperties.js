"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var transformColors_1 = require("./transformColors");
var size_1 = require("../helpers/size");
var backgroundSizeToScaleMode = {
    cover: 'FILL',
    contain: 'FIT',
    repeat: 'TILE',
    center: 'CROP',
    stretch: 'CROP',
    none: 'FILL'
};
exports.transformGeometryStyleProperties = function (property, style, imageHash) {
    var _a;
    if (!style) {
        return {};
    }
    var fills = [];
    if (style.backgroundColor) {
        fills.push(transformColors_1.colorToPaint(style.backgroundColor));
    }
    if (style.backgroundImage) {
        var color = void 0;
        try {
            color = transformColors_1.colorToPaint(typeof style.backgroundImage === 'string'
                ? style.backgroundImage
                : 'uri' in style.backgroundImage
                    ? style.backgroundImage.uri
                    : style.backgroundImage.default);
        }
        catch (e) { }
        if (color) {
            fills.push(color);
        }
        else if (imageHash) {
            if (style.backgroundSize === 'stretch') {
                fills.push({
                    type: 'IMAGE',
                    imageHash: imageHash,
                    scaleMode: backgroundSizeToScaleMode.stretch,
                    imageTransform: [[size_1.transformSize(style.width), 0, 0], [0, size_1.transformSize(style.height), 0]]
                });
            }
            else {
                fills.push({
                    type: 'IMAGE',
                    imageHash: imageHash,
                    scaleMode: style.backgroundSize
                        ? backgroundSizeToScaleMode[style.backgroundSize]
                        : backgroundSizeToScaleMode.cover
                });
            }
        }
    }
    return __assign({}, ((fills.length > 0 && (_a = {}, _a[property] = fills, _a)) || {}), ((style.fillStyleId && { fillStyleId: style.fillStyleId }) || {}), ((style.strokeStyleId && { strokeStyleId: style.strokeStyleId }) || {}));
};
//# sourceMappingURL=transformGeometryStyleProperties.js.map