"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var transformLayoutStyleProperties_1 = require("../../styleTransformers/transformLayoutStyleProperties");
var transformTextStyleProperties_1 = require("../../styleTransformers/transformTextStyleProperties");
var useYogaLayout_1 = require("../../hooks/useYogaLayout");
var transformBlendProperties_1 = require("../../styleTransformers/transformBlendProperties");
var __1 = require("../..");
var useFontName_1 = require("../../hooks/useFontName");
var useTextChildren_1 = require("../../hooks/useTextChildren");
var useSelectionChange_1 = require("../../hooks/useSelectionChange");
var transformAutoLayoutToYoga_1 = require("../../styleTransformers/transformAutoLayoutToYoga");
var useOnLayoutHandler_1 = require("../../hooks/useOnLayoutHandler");
var useInheritStyle_1 = require("../../hooks/useInheritStyle");
var useNodeIdCallback_1 = require("../../hooks/useNodeIdCallback");
var normalizeTextNodeChidren = function (children) {
    return Array.isArray(children) ? children.join('') : children;
};
var Text = function (props) {
    var nodeRef = React.useRef();
    useSelectionChange_1.useSelectionChange(nodeRef, props);
    useNodeIdCallback_1.useNodeIdCallback(nodeRef, props.onNodeId);
    var inheritedStyle = useInheritStyle_1.useInheritStyle();
    var flattenOriginalStyle = __1.StyleSheet.flatten(props.style);
    var style = __assign({}, (process.env.REACT_FIGMA_STYLE_INHERITANCE_ENABLED ? inheritedStyle : {}), (process.env.REACT_FIGMA_WEB_DEFAULTS_ENABLED &&
        props.style &&
        flattenOriginalStyle.display === 'block'
        ? { minWidth: '100%' }
        : {}), __1.StyleSheet.flatten(flattenOriginalStyle), transformAutoLayoutToYoga_1.transformAutoLayoutToYoga(props));
    var children = normalizeTextNodeChidren(props.children);
    var charactersByChildren = useTextChildren_1.useTextChildren(nodeRef);
    var textProps = __assign({}, transformLayoutStyleProperties_1.transformLayoutStyleProperties(style), transformTextStyleProperties_1.transformTextStyleProperties(style), transformBlendProperties_1.transformBlendProperties(style), props, { characters: charactersByChildren || props.characters }, (style && style.textStyleId ? { textStyleId: style.textStyleId } : {}), { style: style,
        children: children });
    var hasDefinedWidth = textProps.width || style.maxWidth;
    var loadedFont = useFontName_1.useFontName(textProps.fontName || { family: 'Roboto', style: 'Regular' });
    var yogaProps = useYogaLayout_1.useYogaLayout(__assign({ nodeRef: nodeRef }, textProps, { loadedFont: loadedFont }));
    useOnLayoutHandler_1.useOnLayoutHandler(yogaProps, props);
    return (React.createElement("text", __assign({}, textProps, yogaProps, { hasDefinedWidth: hasDefinedWidth, loadedFont: loadedFont, innerRef: nodeRef })));
};
exports.Text = Text;
//# sourceMappingURL=Text.js.map