"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var transformDimension_1 = require("../styleTransformers/transformDimension");
var transformFlexDirection = function (yoga) { return function (value) {
    switch (value) {
        case 'row':
            return yoga.FLEX_DIRECTION_ROW;
        case 'row-reverse':
            return yoga.FLEX_DIRECTION_ROW_REVERSE;
        case 'column-reverse':
            return yoga.FLEX_DIRECTION_COLUMN_REVERSE;
        default:
            return yoga.FLEX_DIRECTION_COLUMN;
    }
}; };
var transformAlignItems = function (yoga) { return function (value) {
    switch (value) {
        case 'flex-end':
            return yoga.ALIGN_FLEX_END;
        case 'center':
            return yoga.ALIGN_CENTER;
        case 'stretch':
            return yoga.ALIGN_STRETCH;
        default:
            return yoga.ALIGN_FLEX_START;
    }
}; };
var transformFlexWrap = function (yoga) { return function (value) {
    switch (value) {
        case 'wrap':
            return yoga.WRAP_WRAP;
        case 'nowrap':
            return yoga.WRAP_NO_WRAP;
        default:
            return yoga.WRAP_NO_WRAP;
    }
}; };
var transformAlignSelf = function (yoga) { return function (value) {
    switch (value) {
        case 'auto':
            return yoga.ALIGN_AUTO;
        case 'flex-end':
            return yoga.ALIGN_FLEX_END;
        case 'center':
            return yoga.ALIGN_CENTER;
        case 'stretch':
            return yoga.ALIGN_STRETCH;
        default:
            return yoga.ALIGN_FLEX_START;
    }
}; };
var transformJustifyContent = function (yoga) { return function (value) {
    switch (value) {
        case 'flex-end':
            return yoga.JUSTIFY_FLEX_END;
        case 'center':
            return yoga.JUSTIFY_CENTER;
        case 'space-between':
            return yoga.JUSTIFY_SPACE_BETWEEN;
        case 'space-around':
            return yoga.JUSTIFY_SPACE_AROUND;
        default:
            return yoga.JUSTIFY_FLEX_START;
    }
}; };
var transformPosition = function (yoga) { return function (value) {
    switch (value) {
        case 'absolute':
            return yoga.POSITION_TYPE_ABSOLUTE;
        default:
            return yoga.POSITION_TYPE_RELATIVE;
    }
}; };
var transformOverflow = function (yoga) { return function (value) {
    switch (value) {
        case 'hidden':
            return yoga.OVERFLOW_HIDDEN;
        case 'scroll':
            return yoga.OVERFLOW_SCROLL;
        default:
            return yoga.OVERFLOW_VISIBLE;
    }
}; };
exports.applyStyleToYogaNode = function (yoga) { return function (yogaNode, style) {
    if (style.position) {
        yogaNode.setPositionType(transformPosition(yoga)(style.position));
    }
    if (style.top) {
        transformDimension_1.transformDimensionMapper(style.top)
            .px(function (value) { return yogaNode.setPosition(yoga.EDGE_TOP, value); })
            .percentage(function (value) { return yogaNode.setPositionPercent(yoga.EDGE_TOP, value); });
    }
    if (style.left) {
        transformDimension_1.transformDimensionMapper(style.left)
            .px(function (value) { return yogaNode.setPosition(yoga.EDGE_LEFT, value); })
            .percentage(function (value) { return yogaNode.setPositionPercent(yoga.EDGE_LEFT, value); });
    }
    if (style.right) {
        transformDimension_1.transformDimensionMapper(style.right)
            .px(function (value) { return yogaNode.setPosition(yoga.EDGE_RIGHT, value); })
            .percentage(function (value) { return yogaNode.setPositionPercent(yoga.EDGE_RIGHT, value); });
    }
    if (style.bottom) {
        transformDimension_1.transformDimensionMapper(style.bottom)
            .px(function (value) { return yogaNode.setPosition(yoga.EDGE_BOTTOM, value); })
            .percentage(function (value) { return yogaNode.setPositionPercent(yoga.EDGE_BOTTOM, value); });
    }
    if (style.width) {
        transformDimension_1.transformDimensionMapper(style.width)
            .px(yogaNode.setWidth.bind(yogaNode))
            .percentage(yogaNode.setWidthPercent.bind(yogaNode));
    }
    if (style.height) {
        transformDimension_1.transformDimensionMapper(style.height)
            .px(yogaNode.setHeight.bind(yogaNode))
            .percentage(yogaNode.setHeightPercent.bind(yogaNode));
    }
    if (style.minWidth) {
        transformDimension_1.transformDimensionMapper(style.minWidth)
            .px(yogaNode.setMinWidth.bind(yogaNode))
            .percentage(yogaNode.setMinWidthPercent.bind(yogaNode));
    }
    if (style.maxWidth) {
        transformDimension_1.transformDimensionMapper(style.maxWidth)
            .px(yogaNode.setMaxWidth.bind(yogaNode))
            .percentage(yogaNode.setMaxWidth.bind(yogaNode));
    }
    if (style.minHeight) {
        transformDimension_1.transformDimensionMapper(style.minHeight)
            .px(yogaNode.setMinHeight.bind(yogaNode))
            .percentage(yogaNode.setMinHeightPercent.bind(yogaNode));
    }
    if (style.maxHeight) {
        transformDimension_1.transformDimensionMapper(style.maxHeight)
            .px(yogaNode.setMaxHeight.bind(yogaNode))
            .percentage(yogaNode.setMaxHeight.bind(yogaNode));
    }
    if (style.flexDirection) {
        yogaNode.setFlexDirection(transformFlexDirection(yoga)(style.flexDirection));
    }
    if (style.padding) {
        transformDimension_1.transformDimensionMapper(style.padding)
            .px(function (value) { return yogaNode.setPadding(yoga.EDGE_ALL, value); })
            .percentage(function (value) { return yogaNode.setPaddingPercent(yoga.EDGE_ALL, value); });
    }
    if (style.paddingTop) {
        transformDimension_1.transformDimensionMapper(style.paddingTop)
            .px(function (value) { return yogaNode.setPadding(yoga.EDGE_TOP, value); })
            .percentage(function (value) { return yogaNode.setPaddingPercent(yoga.EDGE_TOP, value); });
    }
    if (style.paddingBottom) {
        transformDimension_1.transformDimensionMapper(style.paddingBottom)
            .px(function (value) { return yogaNode.setPadding(yoga.EDGE_BOTTOM, value); })
            .percentage(function (value) { return yogaNode.setPaddingPercent(yoga.EDGE_BOTTOM, value); });
    }
    if (style.paddingLeft) {
        transformDimension_1.transformDimensionMapper(style.paddingLeft)
            .px(function (value) { return yogaNode.setPadding(yoga.EDGE_LEFT, value); })
            .percentage(function (value) { return yogaNode.setPaddingPercent(yoga.EDGE_LEFT, value); });
    }
    if (style.paddingRight) {
        transformDimension_1.transformDimensionMapper(style.paddingRight)
            .px(function (value) { return yogaNode.setPadding(yoga.EDGE_RIGHT, value); })
            .percentage(function (value) { return yogaNode.setPaddingPercent(yoga.EDGE_RIGHT, value); });
    }
    if (style.paddingVertical) {
        transformDimension_1.transformDimensionMapper(style.paddingVertical)
            .px(function (value) { return yogaNode.setPadding(yoga.EDGE_VERTICAL, value); })
            .percentage(function (value) { return yogaNode.setPaddingPercent(yoga.EDGE_VERTICAL, value); });
    }
    if (style.paddingHorizontal) {
        transformDimension_1.transformDimensionMapper(style.paddingHorizontal)
            .px(function (value) { return yogaNode.setPadding(yoga.EDGE_HORIZONTAL, value); })
            .percentage(function (value) { return yogaNode.setPaddingPercent(yoga.EDGE_HORIZONTAL, value); });
    }
    if (style.margin) {
        transformDimension_1.transformDimensionMapper(style.margin)
            .px(function (value) { return yogaNode.setMargin(yoga.EDGE_ALL, value); })
            .percentage(function (value) { return yogaNode.setMarginPercent(yoga.EDGE_ALL, value); });
    }
    if (style.marginTop) {
        transformDimension_1.transformDimensionMapper(style.marginTop)
            .px(function (value) { return yogaNode.setMargin(yoga.EDGE_TOP, value); })
            .percentage(function (value) { return yogaNode.setMarginPercent(yoga.EDGE_TOP, value); });
    }
    if (style.marginBottom) {
        transformDimension_1.transformDimensionMapper(style.marginBottom)
            .px(function (value) { return yogaNode.setMargin(yoga.EDGE_BOTTOM, value); })
            .percentage(function (value) { return yogaNode.setMarginPercent(yoga.EDGE_BOTTOM, value); });
    }
    if (style.marginLeft) {
        transformDimension_1.transformDimensionMapper(style.marginLeft)
            .px(function (value) { return yogaNode.setMargin(yoga.EDGE_LEFT, value); })
            .percentage(function (value) { return yogaNode.setMarginPercent(yoga.EDGE_LEFT, value); });
    }
    if (style.marginRight) {
        transformDimension_1.transformDimensionMapper(style.marginRight)
            .px(function (value) { return yogaNode.setMargin(yoga.EDGE_RIGHT, value); })
            .percentage(function (value) { return yogaNode.setMarginPercent(yoga.EDGE_RIGHT, value); });
    }
    if (style.marginVertical) {
        transformDimension_1.transformDimensionMapper(style.marginVertical)
            .px(function (value) { return yogaNode.setMargin(yoga.EDGE_VERTICAL, value); })
            .percentage(function (value) { return yogaNode.setMarginPercent(yoga.EDGE_VERTICAL, value); });
    }
    if (style.marginHorizontal) {
        transformDimension_1.transformDimensionMapper(style.marginHorizontal)
            .px(function (value) { return yogaNode.setMargin(yoga.EDGE_HORIZONTAL, value); })
            .percentage(function (value) { return yogaNode.setMarginPercent(yoga.EDGE_HORIZONTAL, value); });
    }
    if (style.borderWidth) {
        yogaNode.setBorder(yoga.EDGE_ALL, style.borderWidth);
    }
    if (style.flex) {
        yogaNode.setFlex(style.flex);
    }
    if (style.flexGrow) {
        yogaNode.setFlexGrow(style.flexGrow);
    }
    if (style.flexShrink) {
        yogaNode.setFlexShrink(style.flexShrink);
    }
    if (style.flexBasis) {
        transformDimension_1.transformDimensionMapper(style.flexBasis)
            .px(yogaNode.setFlexBasis.bind(yogaNode))
            .percentage(yogaNode.setFlexBasisPercent.bind(yogaNode));
    }
    if (style.flexWrap) {
        yogaNode.setFlexWrap(transformFlexWrap(yoga)(style.flexWrap));
    }
    if (style.aspectRatio) {
        yogaNode.setAspectRatio(style.aspectRatio);
    }
    if (style.alignSelf) {
        yogaNode.setAlignSelf(transformAlignSelf(yoga)(style.alignSelf));
    }
    yogaNode.setAlignItems(transformAlignItems(yoga)(style.alignItems));
    yogaNode.setJustifyContent(transformJustifyContent(yoga)(style.justifyContent));
    yogaNode.setOverflow(transformOverflow(yoga)(style.overflow));
}; };
//# sourceMappingURL=applyStyleToYogaNode.js.map