"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var yogaHandler_1 = require("./yogaHandler");
var rpc_1 = require("../rpc");
var $yogaRoot = new rxjs_1.Subject();
exports.$updatedYogaCoords = new rxjs_1.Subject();
exports.updateYogaRoot = function (root) {
    $yogaRoot.next(root);
};
exports.updateYogaNode = function (node) {
    if (!node) {
        return;
    }
    exports.updateYogaRoot(node);
};
rpc_1.$updateYogaReactId
    .pipe(operators_1.map(function (reactId) { return ({ reactId: reactId }); }), operators_1.tap(function (val) { return console.log('$updateYogaReactId', val); }))
    .subscribe($yogaRoot);
$yogaRoot
    .pipe(operators_1.delay(0), operators_1.exhaustMap(function (instance) {
    return new rxjs_1.Observable(function (subscriber) {
        var handleYogaProps = function (newProps) {
            var yogaChildren = newProps.children, nodeBatchId = newProps.nodeBatchId, reactId = newProps.reactId, yogaPropsWithoutChildren = __rest(newProps, ["children", "nodeBatchId", "reactId"]);
            subscriber.next({ reactId: reactId, props: yogaPropsWithoutChildren });
            if (yogaChildren) {
                yogaChildren.forEach(function (child) {
                    handleYogaProps(child);
                });
            }
        };
        rpc_1.api.getTreeForYoga(instance).then(function (treeForYoga) {
            var newProps = yogaHandler_1.yogaHandler(treeForYoga);
            handleYogaProps(newProps);
            subscriber.complete();
        });
    });
}))
    .subscribe(exports.$updatedYogaCoords);
//# sourceMappingURL=yogaStream.js.map