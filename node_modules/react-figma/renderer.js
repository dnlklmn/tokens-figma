"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var non_secure_1 = require("nanoid/non-secure");
var createReconciler = require("react-reconciler");
var useTextChildren_1 = require("./hooks/useTextChildren");
var rpc_1 = require("./rpc");
var serializers_1 = require("./serializers");
var isReactFigmaExperimental = process.env.REACT_FIGMA_EXPERIMENTAL;
if (isReactFigmaExperimental) {
    console.log('REACT_FIGMA_EXPERIMENTAL');
}
var setTextInstance = function (parentNode, childNode) {
    childNode.parent = parentNode;
    useTextChildren_1.setTextChildren(parentNode, childNode.value);
};
var insertToContainer = function (parentNode, newChildNode, beforeChildNode) {
    if (!parentNode || !newChildNode || !beforeChildNode || parentNode.type === 'INSTANCE') {
        return;
    }
    if (newChildNode.type === 'TEXT_CONTAINER') {
        if (parentNode.type === 'TEXT') {
            setTextInstance(parentNode, newChildNode);
        }
    }
    else {
        rpc_1.api.insertToContainer(parentNode, newChildNode, beforeChildNode);
    }
};
var remove = function (childNode) {
    rpc_1.api.remove(childNode);
};
var checkInstanceMatchType = function (instance, type) {
    if (instance.type.toLowerCase() === type) {
        return true;
    }
    if (instance.type === 'FRAME' && type === 'svg') {
        return true;
    }
    return false;
};
var prepareToHydration = function (node, parent) {
    if (node.children && node.children.length >= 0) {
        node.firstHydratableChild = node.children[0];
        node.children.forEach(function (child) { return prepareToHydration(child, node); });
    }
    if (parent) {
        var instanceIndex = parent.children.findIndex(function (child) { return child.id === node.id; });
        node.nextHydratableSibling = parent.children.slice(instanceIndex + 1)[0];
    }
};
var appendToContainer = function (parentNode, childNode) {
    if (!childNode || !parentNode || parentNode.type === 'INSTANCE') {
        return;
    }
    if (childNode.type === 'TEXT_CONTAINER') {
        if (parentNode.type === 'TEXT') {
            setTextInstance(parentNode, childNode);
        }
    }
    else {
        rpc_1.api.appendToContainer(parentNode, childNode);
    }
};
var renderInstance = function (type, node, props) {
    var result = { reactId: (node && node.reactId) || non_secure_1.nanoid(), type: type.toUpperCase() };
    var children = props.children, otherProps = __rest(props, ["children"]);
    if (props.ref) {
        props.ref.current = result;
    }
    if (props.innerRef) {
        props.innerRef.current = result;
        if (props.innerRefCallback) {
            props.innerRefCallback();
        }
    }
    rpc_1.api.renderInstance(type, node, serializers_1.serializeProps(otherProps), result);
    return result;
};
exports.render = function (jsx) { return __awaiter(_this, void 0, void 0, function () {
    var rootNode, HostConfig, reconciler, container;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, rpc_1.api.getInitialTree()];
            case 1:
                rootNode = _a.sent();
                prepareToHydration(rootNode, undefined);
                HostConfig = {
                    now: Date.now,
                    getRootHostContext: function () {
                        return true;
                    },
                    prepareForCommit: function () { },
                    resetAfterCommit: function () { },
                    getChildHostContext: function () {
                        return true;
                    },
                    shouldSetTextContent: function () { return false; },
                    getPublicInstance: function (instance) {
                        return instance;
                    },
                    createInstance: function (type, props) {
                        return renderInstance(type, null, props);
                    },
                    createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
                        return { type: 'TEXT_CONTAINER', value: text };
                    },
                    resetTextContent: function () { },
                    appendInitialChild: function (parentNode, childNode) {
                        appendToContainer(parentNode, childNode);
                    },
                    appendChild: function (parentNode, childNode) {
                        appendToContainer(parentNode, childNode);
                    },
                    insertBefore: function (parentNode, newChildNode, beforeChildNode) {
                        insertToContainer(parentNode, newChildNode, beforeChildNode);
                    },
                    finalizeInitialChildren: function (element, type) {
                        return type === 'page';
                    },
                    supportsMutation: true,
                    supportsHydration: true,
                    appendChildToContainer: function (parentNode, childNode) {
                        appendToContainer(parentNode, childNode);
                    },
                    insertInContainerBefore: function () { },
                    removeChildFromContainer: function () { },
                    prepareUpdate: function () {
                        return true;
                    },
                    commitUpdate: function (node, updatePayload, type, oldProps, newProps) {
                        return renderInstance(type, node, newProps);
                    },
                    commitTextUpdate: function (textInstance, oldText, newText) {
                        if (textInstance.type === 'TEXT_CONTAINER') {
                            textInstance.value = newText;
                        }
                        if (textInstance.type === 'TEXT_CONTAINER' && textInstance.parent) {
                            useTextChildren_1.setTextChildren(textInstance.parent, newText);
                        }
                    },
                    removeChild: function (parentNode, childNode) {
                        if (parentNode && parentNode.type === 'INSTANCE') {
                            return;
                        }
                        remove(childNode);
                    },
                    canHydrateInstance: function (instance, type, props) {
                        if (!checkInstanceMatchType(instance, type) || (instance.parent && instance.parent.type === 'INSTANCE')) {
                            return null;
                        }
                        return instance;
                    },
                    hydrateInstance: function (instance, type, props) {
                        return renderInstance(type, checkInstanceMatchType(instance, type) ? instance : null, props);
                    },
                    getFirstHydratableChild: function (parentInstance) {
                        return parentInstance.firstHydratableChild;
                    },
                    getNextHydratableSibling: function (instance) {
                        return instance.nextHydratableSibling;
                    },
                    didNotHydrateContainerInstance: function () { },
                    didNotFindHydratableContainerInstance: function () { },
                    didNotFindHydratableInstance: function () { },
                    didNotFindHydratableTextInstance: function () { },
                    didNotHydrateInstance: function () { },
                    commitMount: function (instance, type) { },
                    commitHydratedContainer: function () { }
                };
                reconciler = createReconciler(HostConfig);
                reconciler.injectIntoDevTools({
                    bundleType: 1,
                    version: '0.1.6',
                    rendererPackageName: 'react-figma'
                });
                container = reconciler.createContainer(rootNode, true, true);
                reconciler.updateContainer(jsx, container);
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=renderer.js.map