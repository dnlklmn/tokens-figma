"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var InheritStyleContext = React.createContext({});
exports.useInheritStyle = function () {
    if (!process.env.REACT_FIGMA_STYLE_INHERITANCE_ENABLED) {
        return {};
    }
    return React.useContext(InheritStyleContext);
};
var inheritedProps = [
    'color',
    'fontFamily',
    'fontSize',
    'fontStyle',
    'fontVariant',
    'fontWeight',
    'textAlign',
    'lineHeight',
    'letterSpacing'
];
exports.InheritStyleProvider = function (props) {
    var children = props.children, _a = props.style, style = _a === void 0 ? {} : _a;
    if (!process.env.REACT_FIGMA_STYLE_INHERITANCE_ENABLED) {
        return children;
    }
    var inheritedStyle = exports.useInheritStyle();
    var mergedStyle = __assign({}, inheritedStyle, style);
    var providedStyle = inheritedProps.reduce(function (acc, prop) {
        var _a;
        return (__assign({}, acc, (mergedStyle[prop] ? (_a = {}, _a[prop] = mergedStyle[prop], _a) : {})));
    }, {});
    return React.createElement(InheritStyleContext.Provider, { value: providedStyle }, children);
};
//# sourceMappingURL=useInheritStyle.js.map